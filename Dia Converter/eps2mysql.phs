<?php

//simple EPS regex parser that will generate a MySQL file based on a Dia-diagram
//By  Cytox  2010-09-01

/*
Changelog:

v1.0.0 - 2010-09-05
Added generation of pure, valid MySQL code, and not a mix of sqlite & mysql

v1.0.0 - 2010-09-01 Beta
Initial release
*/

include("Includes/BaseFunc.php");

define('NONE', 0);
define('TABLE', 1);
define('COLUMN', 2);
define('TYPE', 3);

if($argc != 2)
{
	print "\r\nUsage:\r\n";
	print basename($argv[0])." <EPS-FILE>\r\n";
	exit(1);
}

if(getcwd() == "C:\Windows\system32")	//handle drag-n-drop
{
	chdir(dirname($argv[0]));
}


###
###	Extract all relevant information from the EPS
###

$EPS = file_get_contents($argv[1]);

$RXTable = "\(([a-z0-9]+)\) dup sw 2 div";	//table name
$RXColumn = "\((\\[?[a-z0-9*]{2,}\\]?(?:\\\\\([0-9]+\\\\\))?)\) [a-z0-9]+\\.[a-z0-9]+ [a-z0-9]+\\.[a-z0-9]+ m";	//column name & column type. will match following: [value] integer*, firstname varchar\(100\)

preg_match_all("/".$RXTable."|".$RXColumn."/i", $EPS, $Matches);



###
###	Create a clean array ('tokenize')
###

$Tokens = array();
$i = 0;
$t = 0;
foreach($Matches[2] as $Key => $Value)
{
	if($Value === "")
	{
		$Tokens[$i][0] = $Matches[1][$Key];
		$Tokens[$i][1] = TABLE;
		$t = 0;
	}
	else
	{
		$Tokens[$i][0] = $Value;
		
		if($t % 2)
		{
			$Tokens[$i][1] = COLUMN;
		}
		else
		{
			$Tokens[$i][1] = TYPE;
		}
	}
	
	$i++;
	$t++;
}



###
###	Generate the SQL ('compile')
###

$SQL = "";
$TNum = count($Tokens);
$Last = NONE;
for($i=0;$i<$TNum;$i++)
{
	if($Tokens[$i][1] == TABLE)
	{
		//print "TABLE: ".$Tokens[$i][0]."\r\n";	//debug
		if($Last == TYPE)
		{
			$SQL .= "\r\n);\r\n\r\n";
		}
		
		$SQL .= "CREATE TABLE ".$Tokens[$i][0]."\r\n(\r\n";
	}
	else if($Tokens[$i][1] == COLUMN)
	{
		//print "COLUMN: ".$Tokens[$i][0]."\r\n";	//debug
		if($Last == TYPE)
		{
			$SQL .= ",\r\n";
		}
		
		$SQL .= "\t".$Tokens[$i][0];
	}
	else if($Tokens[$i][1] == TYPE)	
	{
		//print "TYPE: ".$Tokens[$i][0]."\r\n";	//debug
		$SQL .= " ".$Tokens[$i][0];
		if($i == ($TNum - 1))
		{
			$SQL .= "\r\n)";
		}
	}
	
	$Last = $Tokens[$i][1];
}



###
###	Final processing
###

function PrimaryKey($M)
{
	return "\t".$M[1]." INTEGER AUTO_INCREMENT,\r\n\tPRIMARY KEY(".$M[1].")";
}

$SQL = preg_replace_callback("/\t([a-z]+[a-z0-9]*) INTEGER\\*/is", "PrimaryKey", $SQL);



//replace \(20\) with (20)
function TypeLength($M)
{
	return "(".$M[1].")";
}
$SQL = preg_replace_callback("/\\\\\\(([0-9]+)\\\\\\)/i", "TypeLength", $SQL);

file_put_contents(dirname($argv[1])."/".StripFileExt(basename($argv[1])).".MySQL.sql", $SQL);

?>